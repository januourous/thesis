\contentsline {figure}{\numberline {1}{\ignorespaces World created in Gazebo and starting directory structure after copying the robotic arm simulation files.\relax }}{32}{figure.caption.5}%
\contentsline {subfigure}{\numberline {(a)}{\ignorespaces {Created SDF file in Gazebo which only contains the object to be touched by the robotic arm.}}}{32}{subfigure.1.1}%
\contentsline {subfigure}{\numberline {(b)}{\ignorespaces {Project structure after copying the \textit {dae}, \textit {stl}, and \textit {urdf} files into our package.}}}{32}{subfigure.1.2}%
\contentsline {figure}{\numberline {2}{\ignorespaces Rviz2 kuka}}{33}{figure.caption.6}%
\contentsline {figure}{\numberline {3}{\ignorespaces The ROS \textbf {robot\_state\_publisher} node takes the URDF file content and publishes it to the \textbf {/robot\_description} topic to which Rviz subscribes and gets the robotic arm information to finally show it.\relax }}{33}{figure.caption.7}%
\contentsline {figure}{\numberline {4}{\ignorespaces kuka kr210 joints}}{34}{figure.caption.8}%
\contentsline {figure}{\numberline {5}{\ignorespaces Links in the Kuka KR210.\relax }}{35}{figure.caption.9}%
\contentsline {subfigure}{\numberline {(a)}{\ignorespaces {Links 1, 3 and 5 in the Kuka KR210.}}}{35}{subfigure.5.1}%
\contentsline {subfigure}{\numberline {(b)}{\ignorespaces {Base Link, Link 2, 4 and 6 in the Kuka KR210.}}}{35}{subfigure.5.2}%
\contentsline {figure}{\numberline {6}{\ignorespaces Gazebo World}}{36}{figure.caption.10}%
\contentsline {figure}{\numberline {7}{\ignorespaces The joint state broadcaster node publishes the current state of each joint in the robot's body to the ROS (Robot Operating System) network. This state includes the joint's position, velocity, and effort (torque) values. \relax }}{36}{figure.caption.11}%
\contentsline {figure}{\numberline {8}{\ignorespaces The node \textit {/gazebo\_state/gazebo\_ros\_state} publishes the state of the models in the gazebo world to the topics \textit {/gazebo\_state/link\_states\_demo} and \textit {/gazebo\_state/model\_states\_demo} as specified in Listing \ref {gazeboRosStatePluginXml}\relax }}{36}{figure.caption.12}%
\contentsline {figure}{\numberline {9}{\ignorespaces As a result of adding Listing \ref {cameraSensorXml} a node \textit {camera\_controller} is created and it publishes to the topics \textit {/camera/image\_raw/*}.\relax }}{37}{figure.caption.13}%
\contentsline {figure}{\numberline {10}{\ignorespaces As a result of adding Listing \ref {bumperSensorXml} there are \textit {/contact\_sensor/gazebo\_ros\_bumper\_sensor} nodes publishing the collision details to the topics \textit {/contact\_sensor/bumper\_link\_4}, \textit {/contact\_sensor/bumper\_link\_5}, and\textit { /contact\_sensor/bumper\_link\_6}. \relax }}{37}{figure.caption.14}%
\contentsline {figure}{\numberline {11}{\ignorespaces The joint trajectory controller node is responsible for generating and executing a trajectory plan for the robot's joints. This is the node used to send the desired positions when controlling the robotic arm\relax }}{37}{figure.caption.15}%
\contentsline {figure}{\numberline {12}{\ignorespaces Classes present in the python script that runs the environment experiments for the arm to learn to touch the object.\relax }}{38}{figure.caption.16}%
\contentsline {figure}{\numberline {13}{\ignorespaces Logo der HAW Fulda\relax }}{46}{figure.caption.17}%
